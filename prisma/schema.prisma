// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ROLE
enum Role {
  USER
  ADMIN
}

// THIS ONE IS FOR THE STATUS OF ORDER
enum OrderStatus {
  PENDING
  FULFILLED
  REJECTED
}

//                    NEXT-AUTH
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id String @id @default(cuid())

  //
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?


  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  sessions  Session[]
  profiles  Profile[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------

// ---- PRODUCTS, ORDERS, TRANSACTIONS, REVIEWS ----
// --------------------------------------------------

model Product {
  productId    String   @id @default(cuid())
  admin        Profile  @relation(fields: [adminId], references: [id])
  adminId      String
  name         String
  image        String
  description  String
  brand        String
  category     String?
  price        Float
  countInStock Int
  // AVERAGE OF ALL OF THE REVIEW RATING (JUST YOU KNOW)
  rating       Float
  numReviews   Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt


  //  Reviews
  reviews Review[]

  // OrderElements
  orderElements OrderElement[]

}

model Review {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [productId])
  productId String
  name      String
  rating    Float
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderElement {
  id        String  @id @default(cuid())
  quantity  Int
  product   Product @relation(fields: [productId], references: [productId])
  productId String
  order     Order?  @relation(fields: [orderId], references: [id])
  orderId   String?
}

model Order {
  id        String         @id @default(cuid())
  buyer     Profile        @relation(fields: [buyerId], references: [id])
  buyerId   String
  items     OrderElement[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  status    OrderStatus

}

model Profile {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  role            Role   @default(USER)
  shippingAddress String
  city            String

  ordersHistory Order[]

  // ADDING RELATIONS FOR ADMIN USER (THAT'S WHY THIS FIELD IS OPTIONAL)
  purchaseHistory Product[]
  // ORDERS
  //
  // ADDING ROLE AND DEFULT VALUE


}

// I DON'T NEESD THIS
// model Transaction {
// transactionId String   @id @default(cuid())
// product       Product  @relation(fields: [productId], references: [productId])
// productId     String
// buyer         User     @relation(fields: [buyerId], references: [id])
// buyerId       String
// createdAt     DateTime @default(now())
// }

// --------------------------------------------------
// --------------------------------------------------
